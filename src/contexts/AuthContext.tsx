import { createContext, useContext, useEffect, useState } from 'react';
import { User, Session } from '@supabase/supabase-js';
import { supabase } from '../lib/supabase';

interface AuthContextType {
  user: User | null;
  session: Session | null;
  loading: boolean;
  signOut: () => Promise<void>;
  isSignupComplete: boolean;
  isPasswordReset: boolean;
  isPasswordResetComplete: boolean;
  clearSignupComplete: () => void;
  clearPasswordReset: () => void;
  setPasswordResetComplete: () => void;
  clearPasswordResetComplete: () => void;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

interface AuthProviderProps {
  children: React.ReactNode;
}

export function AuthProvider({ children }: AuthProviderProps) {
  const [user, setUser] = useState<User | null>(null);
  const [session, setSession] = useState<Session | null>(null);
  const [loading, setLoading] = useState(true);
  const [isSignupComplete, setIsSignupComplete] = useState(false);
  const [isPasswordReset, setIsPasswordReset] = useState(false);
  const [isPasswordResetComplete, setIsPasswordResetComplete] = useState(false);

  useEffect(() => {
    // URL„Éë„É©„É°„Éº„Çø„Åã„Çâ„Éë„Çπ„ÉØ„Éº„Éâ„É™„Çª„ÉÉ„ÉàÁä∂ÊÖã„ÇíÊ§úÂá∫
    const urlParams = new URLSearchParams(window.location.search);
    const hasAccessToken = urlParams.get('access_token');
    const hasRefreshToken = urlParams.get('refresh_token');
    const hasType = urlParams.get('type');
    
    // Supabase„ÅÆ„Éë„Çπ„ÉØ„Éº„Éâ„É™„Çª„ÉÉ„Éà„É™„É≥„ÇØ„Åã„Å©„ÅÜ„Åã„ÇíÂà§ÂÆö
    if (hasAccessToken && hasRefreshToken && hasType === 'recovery') {
      localStorage.setItem('auth_trigger', 'password_reset');
    } else if (urlParams.get('reset') === 'true') {
      localStorage.setItem('auth_trigger', 'password_reset');
      // „Ç´„Çπ„Çø„É†„Éë„É©„É°„Éº„Çø„Çí„ÇØ„É™„Ç¢
      window.history.replaceState({}, document.title, window.location.pathname);
    }

    // ÁèæÂú®„ÅÆ„Çª„ÉÉ„Ç∑„Éß„É≥„ÇíÂèñÂæó
    const getSession = async () => {
      try {
        const { data: { session }, error } = await supabase.auth.getSession();
        if (error) {
          // „Çª„ÉÉ„Ç∑„Éß„É≥ÂèñÂæó„Ç®„É©„ÉºÔºà„Éó„É≠„ÉÄ„ÇØ„Ç∑„Éß„É≥Áí∞Â¢É„Åß„ÅØÁÑ°Ë¶ñÔºâ
        } else {
          setSession(session);
          setUser(session?.user || null);
        }
      } catch (error) {
        // „Çª„ÉÉ„Ç∑„Éß„É≥ÂèñÂæó‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫ÁîüÔºà„Éó„É≠„ÉÄ„ÇØ„Ç∑„Éß„É≥Áí∞Â¢É„Åß„ÅØÁÑ°Ë¶ñÔºâ
      } finally {
        setLoading(false);
      }
    };

    getSession();

    // Ë™çË®ºÁä∂ÊÖã„ÅÆÂ§âÊõ¥„ÇíÁõ£Ë¶ñ
    const { data: { subscription } } = supabase.auth.onAuthStateChange(
      async (event, session) => {
        if (event === 'SIGNED_IN' && session?.user) {
          // localStorage„Åã„Çâ„Éà„É™„Ç¨„ÉºÊÉÖÂ†±„ÇíÂèñÂæó
          const authTrigger = localStorage.getItem('auth_trigger');
          
          // URL„Éë„É©„É°„Éº„Çø„ÇÇÁ¢∫Ë™ç
          const urlParams = new URLSearchParams(window.location.search);
          const hasAccessToken = urlParams.get('access_token');
          const hasRefreshToken = urlParams.get('refresh_token');
          const hasType = urlParams.get('type');
          const isResetUrl = urlParams.get('reset') === 'true';
          const isPasswordResetFlow = hasAccessToken && hasRefreshToken && hasType === 'recovery';
          
          if (authTrigger === 'signup' && !isResetUrl && !isPasswordResetFlow) {
            setIsSignupComplete(true);
            localStorage.removeItem('auth_trigger');
          } else if (authTrigger === 'password_reset' || isResetUrl || isPasswordResetFlow) {
            setIsPasswordReset(true);
            localStorage.removeItem('auth_trigger');
            // URL„Éë„É©„É°„Éº„Çø„Çí„ÇØ„É™„Ç¢Ôºà„Éë„Çπ„ÉØ„Éº„Éâ„É™„Çª„ÉÉ„ÉàÂæåÔºâ
            if (isPasswordResetFlow) {
              window.history.replaceState({}, document.title, window.location.pathname);
            }
          }
        } else if (event === 'SIGNED_OUT') {
          // „Çµ„Ç§„É≥„Ç¢„Ç¶„ÉàÊôÇ„ÅÆÁä∂ÊÖã„É™„Çª„ÉÉ„Éà
          setIsSignupComplete(false);
          setIsPasswordReset(false);
          setIsPasswordResetComplete(false);
          localStorage.removeItem('auth_trigger');
        }
        
        setSession(session);
        setUser(session?.user || null);
        setLoading(false);
      }
    );

    return () => subscription.unsubscribe();
  }, []);

  const signOut = async () => {
    try {
      // ÈñãÁô∫Áí∞Â¢É„Åß„ÅÆ„Éá„Éê„ÉÉ„Ç∞„É≠„Ç∞
      if (import.meta.env.DEV) {
        console.log('üîì Starting signOut process...');
      }
      
      const { error } = await supabase.auth.signOut();
      
      if (error) {
        if (import.meta.env.DEV) {
          console.error('‚ùå SignOut error:', error);
        }
        // ÈñãÁô∫Áí∞Â¢É„Åß„ÅØ„Ç®„É©„Éº„Åå„ÅÇ„Å£„Å¶„ÇÇÂº∑Âà∂ÁöÑ„Å´„É≠„Éº„Ç´„É´Áä∂ÊÖã„Çí„ÇØ„É™„Ç¢
        if (import.meta.env.DEV) {
          console.log('üßπ Force clearing local state in dev mode...');
          setSession(null);
          setUser(null);
          setIsSignupComplete(false);
          setIsPasswordReset(false);
          setIsPasswordResetComplete(false);
          localStorage.removeItem('auth_trigger');
          localStorage.removeItem('sb-auth-token');
        }
      } else {
        if (import.meta.env.DEV) {
          console.log('‚úÖ SignOut successful');
        }
      }
    } catch (error) {
      if (import.meta.env.DEV) {
        console.error('‚ùå SignOut catch error:', error);
        // ÈñãÁô∫Áí∞Â¢É„Åß„ÅØ„Ç≠„É£„ÉÉ„ÉÅ„Ç®„É©„Éº„Åß„ÇÇÂº∑Âà∂„ÇØ„É™„Ç¢
        console.log('üßπ Force clearing local state after catch...');
        setSession(null);
        setUser(null);
        setIsSignupComplete(false);
        setIsPasswordReset(false);
        setIsPasswordResetComplete(false);
        localStorage.removeItem('auth_trigger');
        localStorage.removeItem('sb-auth-token');
      }
    }
  };

  const clearSignupComplete = () => {
    setIsSignupComplete(false);
  };

  const clearPasswordReset = () => {
    setIsPasswordReset(false);
    setPasswordResetComplete();
  };

  const setPasswordResetComplete = () => {
    setIsPasswordResetComplete(true);
  };

  const clearPasswordResetComplete = () => {
    setIsPasswordResetComplete(false);
  };

  const value = {
    user,
    session,
    loading,
    signOut,
    isSignupComplete,
    isPasswordReset,
    isPasswordResetComplete,
    clearSignupComplete,
    clearPasswordReset,
    setPasswordResetComplete,
    clearPasswordResetComplete,
  };

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
}

export function useAuth() {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth„ÅØAuthProviderÂÜÖ„Åß‰ΩøÁî®„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
  }
  return context;
}